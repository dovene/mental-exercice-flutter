import 'package:flutter/material.dart';
import 'dart:math' as math;

class AnimatedSubjectIcon extends StatelessWidget {
  final IconData icon;
  final AnimationController animationController;

  const AnimatedSubjectIcon({
    Key? key,
    required this.icon,
    required this.animationController,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Create multiple animations from controller
    final bounceAnimation = TweenSequence<double>([
      TweenSequenceItem(tween: Tween(begin: 0.0, end: 15.0), weight: 1),
      TweenSequenceItem(tween: Tween(begin: 15.0, end: 0.0), weight: 1),
    ]).animate(CurvedAnimation(
      parent: animationController,
      curve: Curves.easeInOut,
    ));

    final rotationAnimation = Tween<double>(
      begin: 0.0,
      end: 0.25,
    ).animate(CurvedAnimation(
      parent: animationController,
      curve: Curves.easeInOut,
    ));

    final scaleAnimation = TweenSequence<double>([
      TweenSequenceItem(tween: Tween(begin: 1.0, end: 1.2), weight: 1),
      TweenSequenceItem(tween: Tween(begin: 1.2, end: 1.0), weight: 1),
    ]).animate(CurvedAnimation(
      parent: animationController,
      curve: Curves.easeInOut,
    ));

    return AnimatedBuilder(
      animation: animationController,
      builder: (context, child) {
        return Stack(
          alignment: Alignment.center,
          children: [
            // Background particles
            ...List.generate(
              5,
              (i) {
                final angle = 2 * math.pi * i / 5;
                final distance = 30.0 + 10.0 * math.sin(animationController.value * math.pi * 2 + i);
                
                return Positioned(
                  left: math.cos(angle) * distance + 50,
                  top: math.sin(angle) * distance + 50,
                  child: Opacity(
                    opacity: 0.2 + 0.2 * math.sin(animationController.value * math.pi * 2 + i),
                    child: Container(
                      width: 10,
                      height: 10,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        shape: BoxShape.circle,
                      ),
                    ),
                  ),
                );
              },
            ),
            
            // Shadow effect
            Positioned(
              top: bounceAnimation.value + 5,
              child: Opacity(
                opacity: 0.3,
                child: Icon(
                  icon,
                  size: 45,
                  color: Colors.black45,
                ),
              ),
            ),
            
            // Main icon with animation
            Transform.translate(
              offset: Offset(0, -bounceAnimation.value),
              child: Transform.rotate(
                angle: rotationAnimation.value * 2 * math.pi,
                child: Transform.scale(
                  scale: scaleAnimation.value,
                  child: Icon(
                    icon,
                    size: 45,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
            
            // Glowing effect
            Transform.translate(
              offset: Offset(0, -bounceAnimation.value),
              child: ShaderMask(
                shaderCallback: (Rect bounds) {
                  return RadialGradient(
                    center: Alignment.center,
                    radius: 0.5 + 0.5 * scaleAnimation.value,
                    colors: [Colors.white, Colors.transparent],
                    stops: [0.1, 1.0],
                  ).createShader(bounds);
                },
                child: Icon(
                  icon,
                  size: 55,
                  color: Colors.white.withOpacity(0.5),
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}